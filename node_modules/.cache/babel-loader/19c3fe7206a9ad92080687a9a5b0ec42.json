{"ast":null,"code":"var _jsxFileName = \"D:\\\\Dev projekt\\\\Portfolio\\\\src\\\\components\\\\themetoggle\\\\Themetoggle.jsx\";\nimport { useEffect, useState } from \"react\";\nimport { setTheme } from \"../../themes\";\nimport style from \"./Themetoggle.module.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst [active, setActive] = useState(false);\nuseEffect(() => {\n  localStorage.getItem(\"theme\") === \"dark-theme\" || localStorage.getItem(\"theme\") === null ? setActive(false) : localStorage.getItem(\"theme\") === \"light-theme\" ? setActive(true) : \"\";\n}, []);\n\nconst clickHandler = () => {\n  if (localStorage.getItem(\"theme\") === \"dark-theme\") {\n    setTheme(\"light-theme\");\n    setActive(true);\n  } else {\n    setTheme(\"dark-theme\");\n    setActive(false);\n  }\n};\n\nconst handleKeypress = e => {\n  e.preventDefault();\n\n  if (e.key === \"Enter\") {\n    clickHandler();\n  }\n};\n\nexport function Themetoggle() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onClick: clickHandler,\n    onKeyUp: handleKeypress,\n    tabIndex: \"0\",\n    \"theme-tooltip\": \"Theme\",\n    className: style.container,\n    id: \"toggle\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      tabIndex: \"-1\",\n      type: \"checkbox\",\n      className: style.togglecheckbox,\n      checked: active,\n      readOnly: true,\n      \"aria-label\": \"toggle theme\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"toggle\",\n      className: style.togglelabel\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}\n_c = Themetoggle;\n\nvar _c;\n\n$RefreshReg$(_c, \"Themetoggle\");","map":{"version":3,"sources":["D:/Dev projekt/Portfolio/src/components/themetoggle/Themetoggle.jsx"],"names":["useEffect","useState","setTheme","style","active","setActive","localStorage","getItem","clickHandler","handleKeypress","e","preventDefault","key","Themetoggle","container","togglecheckbox","togglelabel"],"mappings":";AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,QAAT,QAAyB,cAAzB;AACA,OAAOC,KAAP,MAAkB,2BAAlB;;AAEA,MAAM,CAACC,MAAD,EAASC,SAAT,IAAsBJ,QAAQ,CAAC,KAAD,CAApC;AAEAD,SAAS,CAAC,MAAM;AACdM,EAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,MAAkC,YAAlC,IACAD,YAAY,CAACC,OAAb,CAAqB,OAArB,MAAkC,IADlC,GAEIF,SAAS,CAAC,KAAD,CAFb,GAGIC,YAAY,CAACC,OAAb,CAAqB,OAArB,MAAkC,aAAlC,GACAF,SAAS,CAAC,IAAD,CADT,GAEA,EALJ;AAMD,CAPQ,EAON,EAPM,CAAT;;AASA,MAAMG,YAAY,GAAG,MAAM;AACzB,MAAIF,YAAY,CAACC,OAAb,CAAqB,OAArB,MAAkC,YAAtC,EAAoD;AAClDL,IAAAA,QAAQ,CAAC,aAAD,CAAR;AACAG,IAAAA,SAAS,CAAC,IAAD,CAAT;AACD,GAHD,MAGO;AACLH,IAAAA,QAAQ,CAAC,YAAD,CAAR;AACAG,IAAAA,SAAS,CAAC,KAAD,CAAT;AACD;AACF,CARD;;AAUA,MAAMI,cAAc,GAAIC,CAAD,IAAO;AAC5BA,EAAAA,CAAC,CAACC,cAAF;;AACA,MAAID,CAAC,CAACE,GAAF,KAAU,OAAd,EAAuB;AACrBJ,IAAAA,YAAY;AACb;AACF,CALD;;AAMA,OAAO,SAASK,WAAT,GAAuB;AAC5B,sBACE;AACE,IAAA,OAAO,EAAEL,YADX;AAEE,IAAA,OAAO,EAAEC,cAFX;AAGE,IAAA,QAAQ,EAAC,GAHX;AAIE,qBAAc,OAJhB;AAKE,IAAA,SAAS,EAAEN,KAAK,CAACW,SALnB;AAME,IAAA,EAAE,EAAC,QANL;AAAA,4BAQE;AACE,MAAA,QAAQ,EAAC,IADX;AAEE,MAAA,IAAI,EAAC,UAFP;AAGE,MAAA,SAAS,EAAEX,KAAK,CAACY,cAHnB;AAIE,MAAA,OAAO,EAAEX,MAJX;AAKE,MAAA,QAAQ,MALV;AAME,oBAAW;AANb;AAAA;AAAA;AAAA;AAAA,YARF,eAgBE;AAAO,MAAA,OAAO,EAAC,QAAf;AAAwB,MAAA,SAAS,EAAED,KAAK,CAACa;AAAzC;AAAA;AAAA;AAAA;AAAA,YAhBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAoBD;KArBeH,W","sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { setTheme } from \"../../themes\";\r\nimport style from \"./Themetoggle.module.scss\";\r\n\r\nconst [active, setActive] = useState(false);\r\n\r\nuseEffect(() => {\r\n  localStorage.getItem(\"theme\") === \"dark-theme\" ||\r\n  localStorage.getItem(\"theme\") === null\r\n    ? setActive(false)\r\n    : localStorage.getItem(\"theme\") === \"light-theme\"\r\n    ? setActive(true)\r\n    : \"\";\r\n}, []);\r\n\r\nconst clickHandler = () => {\r\n  if (localStorage.getItem(\"theme\") === \"dark-theme\") {\r\n    setTheme(\"light-theme\");\r\n    setActive(true);\r\n  } else {\r\n    setTheme(\"dark-theme\");\r\n    setActive(false);\r\n  }\r\n};\r\n\r\nconst handleKeypress = (e) => {\r\n  e.preventDefault();\r\n  if (e.key === \"Enter\") {\r\n    clickHandler();\r\n  }\r\n};\r\nexport function Themetoggle() {\r\n  return (\r\n    <div\r\n      onClick={clickHandler}\r\n      onKeyUp={handleKeypress}\r\n      tabIndex=\"0\"\r\n      theme-tooltip=\"Theme\"\r\n      className={style.container}\r\n      id=\"toggle\"\r\n    >\r\n      <input\r\n        tabIndex=\"-1\"\r\n        type=\"checkbox\"\r\n        className={style.togglecheckbox}\r\n        checked={active}\r\n        readOnly\r\n        aria-label=\"toggle theme\"\r\n      />\r\n      <label htmlFor=\"toggle\" className={style.togglelabel}></label>\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}