{"ast":null,"code":"var _jsxFileName = \"D:\\\\Dev projekt\\\\Portfolio\\\\src\\\\components\\\\themetoggle\\\\Themetoggle.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport \"./themetoggle.scss\";\nimport { setTheme } from \"../../themes\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Themetoggle() {\n  _s();\n\n  const [toggleTheme, setToggleTheme] = useState(\"dark\");\n  let theme = localStorage.getItem(\"theme\");\n\n  const clickHandler = () => {\n    localStorage.getItem(\"theme\") === \"dark-theme\" ? setTheme(\"light-theme\") && setToggleTheme(\"light\") : setTheme(\"theme-dark\") && setToggleTheme(\"dark\");\n  };\n\n  useEffect(() => {\n    if (localStorage.getItem(\"theme\") === \"dark-theme\") {\n      setToggleTheme(\"dark\");\n    } else if (localStorage.getItem(\"theme\") === \"light-theme\") {\n      setToggleTheme(\"light\");\n    }\n  }, [theme]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container--toggle\",\n    children: [toggleTheme === \"light\" ? /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"checkbox\",\n      id: \"toggle\",\n      className: \"toggle--checkbox\",\n      onClick: clickHandler,\n      checked: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"checkbox\",\n      id: \"toggle\",\n      className: \"toggle--checkbox\",\n      onClick: clickHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"toggle\",\n      className: \"toggle--label\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"toggle--label-background\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Themetoggle, \"NzaUipkeZ8+K53Kblf5tREbQKqU=\");\n\n_c = Themetoggle;\n\nvar _c;\n\n$RefreshReg$(_c, \"Themetoggle\");","map":{"version":3,"sources":["D:/Dev projekt/Portfolio/src/components/themetoggle/Themetoggle.jsx"],"names":["React","useEffect","useState","setTheme","Themetoggle","toggleTheme","setToggleTheme","theme","localStorage","getItem","clickHandler"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAO,oBAAP;AACA,SAASC,QAAT,QAAyB,cAAzB;;AAEA,eAAe,SAASC,WAAT,GAAuB;AAAA;;AACpC,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCJ,QAAQ,CAAC,MAAD,CAA9C;AACA,MAAIK,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAZ;;AAEA,QAAMC,YAAY,GAAG,MAAM;AACzBF,IAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,MAAkC,YAAlC,GACIN,QAAQ,CAAC,aAAD,CAAR,IAA2BG,cAAc,CAAC,OAAD,CAD7C,GAEIH,QAAQ,CAAC,YAAD,CAAR,IAA0BG,cAAc,CAAC,MAAD,CAF5C;AAGD,GAJD;;AAMAL,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIO,YAAY,CAACC,OAAb,CAAqB,OAArB,MAAkC,YAAtC,EAAoD;AAClDH,MAAAA,cAAc,CAAC,MAAD,CAAd;AACD,KAFD,MAEO,IAAIE,YAAY,CAACC,OAAb,CAAqB,OAArB,MAAkC,aAAtC,EAAqD;AAC1DH,MAAAA,cAAc,CAAC,OAAD,CAAd;AACD;AACF,GANQ,EAMN,CAACC,KAAD,CANM,CAAT;AAQA,sBACE;AAAK,IAAA,SAAS,EAAC,mBAAf;AAAA,eACGF,WAAW,KAAK,OAAhB,gBACC;AACE,MAAA,IAAI,EAAC,UADP;AAEE,MAAA,EAAE,EAAC,QAFL;AAGE,MAAA,SAAS,EAAC,kBAHZ;AAIE,MAAA,OAAO,EAAEK,YAJX;AAKE,MAAA,OAAO;AALT;AAAA;AAAA;AAAA;AAAA,YADD,gBASC;AACE,MAAA,IAAI,EAAC,UADP;AAEE,MAAA,EAAE,EAAC,QAFL;AAGE,MAAA,SAAS,EAAC,kBAHZ;AAIE,MAAA,OAAO,EAAEA;AAJX;AAAA;AAAA;AAAA;AAAA,YAVJ,eAiBE;AAAO,MAAA,OAAO,EAAC,QAAf;AAAwB,MAAA,SAAS,EAAC,eAAlC;AAAA,6BACE;AAAM,QAAA,SAAS,EAAC;AAAhB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAjBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAuBD;;GAzCuBN,W;;KAAAA,W","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport \"./themetoggle.scss\";\r\nimport { setTheme } from \"../../themes\";\r\n\r\nexport default function Themetoggle() {\r\n  const [toggleTheme, setToggleTheme] = useState(\"dark\");\r\n  let theme = localStorage.getItem(\"theme\");\r\n\r\n  const clickHandler = () => {\r\n    localStorage.getItem(\"theme\") === \"dark-theme\"\r\n      ? setTheme(\"light-theme\") && setToggleTheme(\"light\")\r\n      : setTheme(\"theme-dark\") && setToggleTheme(\"dark\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (localStorage.getItem(\"theme\") === \"dark-theme\") {\r\n      setToggleTheme(\"dark\");\r\n    } else if (localStorage.getItem(\"theme\") === \"light-theme\") {\r\n      setToggleTheme(\"light\");\r\n    }\r\n  }, [theme]);\r\n\r\n  return (\r\n    <div className=\"container--toggle\">\r\n      {toggleTheme === \"light\" ? (\r\n        <input\r\n          type=\"checkbox\"\r\n          id=\"toggle\"\r\n          className=\"toggle--checkbox\"\r\n          onClick={clickHandler}\r\n          checked\r\n        />\r\n      ) : (\r\n        <input\r\n          type=\"checkbox\"\r\n          id=\"toggle\"\r\n          className=\"toggle--checkbox\"\r\n          onClick={clickHandler}\r\n        />\r\n      )}\r\n      <label htmlFor=\"toggle\" className=\"toggle--label\">\r\n        <span className=\"toggle--label-background\"></span>\r\n      </label>\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}